.. _golang-enterprise-authentication-mechanisms:

====================================
Enterprise Authentication Mechanisms
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to authenticate with MongoDB using the
**authentication mechanisms** available in the MongoDB Enterprise Edition.
Authentication mechanisms are processes by which the driver and server confirm
the identity of a client to ensure security before connecting.

You can use the following authentication mechanisms with the latest version of
the MongoDB Enterprise Edition.

- :ref:`GSSAPI/Kerberos <golang-kerberos>`
- :ref:`LDAP (Plain) <golang-LDAP>`

To authenticate using another mechanism, see the
:ref:`<golang-authentication-mechanisms>` fundamentals page. For
more information on establishing a connection to your MongoDB cluster, see the
:ref:`golang-connection-guide`.

You can specify your authentication mechanism and credentials when connecting to
MongoDB using the following methods:

- Using a **connection string**, which is a string
  that tells the driver how to connect to a MongoDB deployment and how to behave while
  connected.

- Specifying credentials and an authentication mechanism in the
  ``Credential`` type from the {+driver-short+}. You can then use your
  ``Credential`` struct to provide options for the ``Client``.

This guide provides information on using types and methods provided by
the {+driver-short+} for enterprise authentication, rather than using a
connection string. For more information on using a connection string for
enterprise authentication, see the :manual:`manual entry on Connection
String URIs </reference/connection-string/#authentication-options>`.

.. _golang-kerberos:

Authenticate with GSSAPI/Kerberos
---------------------------------

The Generic Security Services API (GSSAPI) authentication mechanism allows the 
user to authenticate to a Kerberos service using the user's principal name.

The following example specifies the authentication mechanism using the following
placeholders:

- ``username``: Your :wikipedia:`URL-encoded <Percent-encoding>`
  principal name. A sample username is *myuser@KERBEROS.EXAMPLE.COM*.
- ``password``: Your Kerberos user's password.
- ``hostname``: The network address of your MongoDB server, accessible by your client.
- ``port``: Your MongoDB server's port number.

.. note::

   Using Kerberos authentication requires the "gssapi" build tag and ``cgo``
   support during compilation. The default service name for Kerberos is
   "mongodb". You can define the ``AuthMechanismProperties`` field in
   the ``Credential`` struct to use a different service name.

The following code shows how you can define a ``Credential`` struct to
authenticate to Kerberos and create a client with your authentication
preferences:

.. code-block:: go

   credential := options.Credential{
           AuthMechanism: "GSSAPI",
           Username:      "<username>",
           Password:      "<password>",
   }

   uri := "mongodb://<hostname>:<port>"
   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)
   
   client, err := mongo.Connect(context.TODO(), clientOpts)

.. tip::

   You don't need to define a password in your ``Credential`` struct if
   you store authentication keys in ``keytab`` files. You can initialize
   a credential cache for authenticating the user principal using the
   ``kinit`` binary. The following command shows how you can invoke a
   credential cache for a sample username:
   
   .. code-block:: sh
   
      kinit myuser@KERBEROS.EXAMPLE.COM

.. _golang-LDAP:

Authenticate with LDAP (PLAIN)
------------------------------

You can authenticate to a Lightweight Directory Access Protocol (LDAP) server 
using your directory-server username and password.

.. warning::

   This authentication mechanism sends the password to the server in
   plaintext, so you should use this mechanism only with TLS connections.

The following example specifies the authentication mechanism using the following
placeholders:

- ``username``: Your LDAP username
- ``password``: Your LDAP password
- ``hostname``: The network address of your MongoDB server, accessible
  by your client
- ``port``: Your MongoDB server's port number

The following code shows how you can define a ``Credential`` struct to
authenticate to LDAP and create a client with your authentication
preferences:

.. code-block:: go

   credential := options.Credential{
           AuthMechanism: "PLAIN",
           Username:      "<username>",
           Password:      "<password>",
	}

   uri := "mongodb://<hostname>:<port>"
   clientOpts := options.Client().ApplyURI(uri).SetAuth(credential)
   
   client, err := mongo.Connect(context.TODO(), clientOpts)

.. tip::

   The method refers to PLAIN instead of LDAP since it
   authenticates using the PLAIN Simple Authentication and Security Layer
   (SASL) defined in `RFC-4616 <https://tools.ietf.org/html/rfc4616>`__.
         
Configuration Options
---------------------

You can specify additional properties with your authentication
mechanism using the ``AuthMechanismProperties`` field in the
``Credential`` struct. The following code shows how you can set values
for the ``SERVICE_NAME`` and ``SERVICE_REALM`` fields when defining a
``Credential`` struct:

.. code-block:: go

   credential := options.Credential{
           AuthMechanism: "GSSAPI",
           Username:      "<username>",
           Password:      "<password>",
           AuthMechanismProperties: map[string]string{
                   "SERVICE_REALM": "<Kerberos service realm>",
                   "SERVICE_NAME":  "<service name>",
           },
   }

For a full list of properties, see the
:manual:`manual entry on authentication properties </reference/connection-string/#mongodb-urioption-urioption.authMechanismProperties>`.

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:

- :manual:`Kerberos Authentication </core/kerberos/>`
- :manual:`LDAP Proxy Authentication </core/security-ldap/>`
- :ref:`<golang-connection-guide>`
- :ref:`<golang-authentication-mechanisms>`
- :manual:`Connection String URI Format </reference/connection-string/>`

API Documentation
~~~~~~~~~~~~~~~~~

- `Credential <{+api+}/mongo/options#Credential>`__
- `SetAuth() <{+api+}/mongo/options#ClientOptions.SetAuth>`__