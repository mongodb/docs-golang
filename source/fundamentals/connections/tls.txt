.. _golang-tls:

==========================
Enable TLS on a Connection
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to MongoDB instances with
the TLS security protocol.

To configure your connection to use TLS, enable
the TLS option and provide your certificates for validation.

.. tip::
   
   To learn more about TLS, see the Wikipedia entry on
   :wikipedia:`Transport Layer Security <Transport_Layer_Security>`.

.. _golang-enable-tls:

Enable TLS
----------

You can enable TLS on a connection to your MongoDB instance
in the following ways:

- Setting the ``tls`` option to ``true`` in your connection string
- Passing an empty ``Config`` struct to the ``SetTLSConfig()``
  method when creating a ``ClientOptions`` instance

.. tabs::

   .. tab:: Connection String
      :tabid: connection string tls true

      A ``Client`` instance can connect with TLS if you set the
      ``tls`` option to ``true`` in your connection string:

      .. code-block:: go
         :emphasize-lines: 1

         uri := "mongodb://<hostname>:<port>?tls=true"
         opts := options.Client().ApplyURI(uri)
         client, _ := mongo.Connect(context.TODO(), opts)

   .. tab:: ClientOptions
      :tabid: clientoptions tls true

      A ``Client`` instance can connect with TLS if you set the
      ``TLSConfig`` field of a ``ClientOptions`` instance to an empty
      ``Config`` struct:
      
      .. code-block:: go
         :emphasize-lines: 2
         
         uri := "<connection string>"
         opts := options.Client().ApplyURI(uri).SetTLSConfig(&tls.Config{})
         client, _ := mongo.Connect(context.TODO(), opts)

.. note::
   
   If you use a DNS SRV record when connecting to MongoDB by specifying
   the ``+srv`` modification in your connection string, you enable
   TLS on your connection by default.

Within your ``Config`` instance, you can set optional
fields to configure TLS on your connection. For **testing purposes**,
you can set the ``InsecureSkipVerify`` field to ``true``.

Setting the ``InsecureSkipVerify`` field to ``true`` disables
both certificate and hostname validation.
   
.. warning::

   Specifying this option in a production environment makes
   your application insecure and potentially
   vulnerable to expired certificates and foreign processes posing
   as valid client instances.

For a full list of client options, see :ref:`golang-connection-options`.

.. _golang-configure-tls-certificates:

Configure Certificates
----------------------

To successfully initiate a TLS request, an application must prove its
identity by referencing cryptographic certificates. To connect to
MongoDB with TLS, your certificates must be stored as PEM
files.

.. important::

   For production use, we recommend that your MongoDB deployment uses valid
   certificates generated and signed by the same certificate authority.
   For testing, it can use self-signed certificates.

The following list describes the components needed to establish
a connection with TLS:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - TLS Component
     - Description

   * - Certificate Authority (CA)
     - One or more certificate authorities to
       trust when making a TLS connection.

   * - Client Certificate
     - A digital certificate and a key that allows the server to verify the identity
       of your application to establish an encrypted network connection.

   * - Certificate Key
     - The client certificate private key file. This key is often
       included within the certificate file itself.

   * - Passphrase
     - The password to decrypt the private client key if it is encrypted.

.. tip::
   
   To learn more about the PEM format, see the Wikipedia entry on
   :wikipedia:`Privacy-Enhanced Mail <Privacy-Enhanced_Mail>`.

.. _golang-client-tls-connect:

Reference Certificates in a Client
----------------------------------

You must reference your certificates in your ``ClientOptions``
object so that the server can validate them before the client connects.
We recommend that you set the ``TLSConfig`` field of your
``ClientOptions`` instance to a ``Config`` struct to configure your
TLS connection. ``Config`` structs are native to Go and allow you to keep
all your TLS options in a single reusable object.

To create a ``Config`` instance, import the ``crypto/tls`` and
``crypto/x509`` packages. Next, create a ``Config`` struct instance and
set the relevant struct fields for your configuration.

To learn more about the ``Config`` struct and the
``tls`` package, see the `tls.Config API documentation
<https://pkg.go.dev/crypto/tls#Config>`__.

.. _node-tls-config-full-example:

Example
~~~~~~~

This example shows how to create a ``Config`` instance and
a ``Client`` instance that includes TLS options by performing the
following actions:

1. Creating variables to reference the certificate filepaths

#. Creating a CA file pool by using the ``x509.NewCertPool()`` method
   and appending the contents of the CA file

#. Loading the client certificate files by using the
   ``tls.LoadX509KeyPair()`` method

#. Instantiating a ``Config`` struct and setting the ``RootCAs`` and
   ``Certificates`` fields

#. Passing the ``Config`` instance to the ``SetTLSConfig()`` method to
   set the ``TLSConfig`` field of the ``ClientOptions``

.. literalinclude:: /includes/fundamentals/code-snippets/tls.go
   :language: go

Additional Information
----------------------

To learn about enabling TLS on a connection, see the
following Server manual documentation:

- :manual:`TLS/SSL (Transport Encryption) </core/security-transport-encryption/>`
- :manual:`TLS/SSL Configuration for Clients </tutorial/configure-ssl-clients/>`

API Documentation
~~~~~~~~~~~~~~~~~

- `ClientOptions <{+api+}/mongo/options#ClientOptions>`__
- `SetTLSConfig() <{+api+}/mongo/options#ClientOptions.SetTLSConfig>`__