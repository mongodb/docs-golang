=================
Change a Document
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to change documents in a MongoDB
collection using **update** and **replace** operations.

Update operations modify the fields that you specify in one or more
documents while leaving other fields and values unchanged. Replace
operations remove all existing fields except for ``_id`` in
one or more documents and substitute the deleted fields with new fields
and values.

A Note About ``_id``
~~~~~~~~~~~~~~~~~~~~

Each document in a MongoDB collection has a unique and immutable ``_id``
field. You cannot use update and replace operations to modify the
``_id`` values. If you attempt to change this field, the update and
replace methods return a ``WriteError``.

.. _updateDocuments:

Update
------

To update one document, use the ``UpdateOne()`` method, and to update
multiple documents, use the ``UpdateMany()`` method. Each method takes
an **update document** that includes at least one **update operator**.
The update operator specifies the type of update to perform. The update
document also includes the fields and values that describe the change.
Update documents use the following format:

.. code-block:: go

   bson.D{{"<update operator>", bson.D{{"<field>", "<value>"}, 
                                       {"<field>", "<value>"}, ... }}, 
          {"<update operator>", ... }, ... }

See the MongoDB server manual for a :manual:`complete list of update operators
and descriptions </reference/operator/update-field/>`.

.. note:: Aggregation Pipelines in Update Operations

   If you are using MongoDB Version 4.2 or later, you can use aggregation
   pipelines made up of a subset of aggregation stages in update operations. For
   more information on the aggregation stages MongoDB supports in
   aggregation pipelines, see our tutorial on performing
   :manual:`updates with aggregation pipelines </tutorial/update-documents-with-aggregation-pipeline/>`.

Example
~~~~~~~

The following document describes an employee:

.. code-block:: json
   :copyable: false

   {
      "_id" : 2158,
      "name" : "Mary Shelley",
      "department" : "Marketing",
      "role" : "Marketing Analyst",
      "bonus" : 2500,
      ...
   }

The following code shows how you can use ``UpdateOne()`` to:

- Locate the document with ``_id`` value 2158.
- Use the ``$set`` update operator to change the value of the ``name``
  field to "Mary Wollstonecraft Shelley" and the ``role`` field to
  "Marketing Director".
- Use the ``$inc`` update operator to increment the value of the
  ``bonus`` field by 2000.

.. code-block:: go

   filter := bson.D{{"_id", 2158}}
   update := bson.D{{"$set", bson.D{{"name", "Mary Wollstonecraft Shelley"}, 
       {"role", "Marketing Director"}}, {"$inc", bson.D{{"bonus", 2000}}}}

   result, err := collection.UpdateOne(context.TODO(), filter, update)

``UpdateOne()`` and ``UpdateMany`` return an ``UpdateResult`` type that
contains information about the update operation such as
``MatchedCount``, ``ModifiedCount``, ``UpsertedCount``, ``UpsertedID``.

The following shows how to access the information in the
``UpdateResult`` type:

.. code-block:: go

   fmt.Printf("Documents matched: %v\n", result.MatchedCount)
   fmt.Printf("Documents modified: %v\n", result.ModifiedCount)
   fmt.Printf("Documents upserted: %v\n", result.UpsertedCount)
   fmt.Printf("_id of upserted document: %v\n", result.UpsertedID)

The following shows the updated document resulting from the preceding update operation:

.. code-block:: json
   :copyable: false

   {
      "_id" : 2158,
      "name" : "Mary Wollstonecraft Shelley",
      "department" : "Marketing",
      "role" : "Marketing Director",
      "bonus" : 4500,
      ...
   }

If multiple documents match the query filter passed to ``UpdateOne()``,
the method selects and updates the first matched document. If no
documents match the query filter in the update operation,
``UpdateOne()`` makes no changes to the document. See our **<TODO:
link>** upsert guide to learn how to insert a new document if no
documents match the query filter.

.. _replacementDocument:

Replace
-------

To perform a replace operation, create a **replacement document**, which is the
document that you want to take the place of an existing document.
Replacement documents use the following format:

.. code-block:: go

   bson.D{{"<field>", "<value>"}, {"<field>", "<value>"}, ... }

Example
~~~~~~~

The following document describes a kitchen item:

.. code-block:: json
   :copyable: false

   {
      "_id" : 2056,
      "item" : "Mug",
      "brand" : "Simply Ceramics",
      "price" : 2.99,
      "material" : "Glass"
   }


The following code shows how you can use a replace operation to substitute
this document with one that contains only the fields ``item`` with a
value of "Cup" and ``quantity`` with a value of 107:

.. code-block:: go

   filter := bson.D{{"_id", 2056}}
   replacement := bson.D{{"item", "Cup"}, {"quantity", 107}}

   result, err := collection.ReplaceOne(context.TODO(), filter, replacement)
   
``ReplaceOne()`` returns an ``UpdateResult`` type that
contains information about the replace operation such as
``MatchedCount``, ``ModifiedCount``, ``UpsertedCount``, ``UpsertedID``.

The following shows how to access the information in the
``UpdateResult`` type:

.. code-block:: go

   fmt.Printf("Documents matched: %v\n", result.MatchedCount)
   fmt.Printf("Documents modified: %v\n", result.ModifiedCount)
   fmt.Printf("Documents upserted: %v\n", result.UpsertedCount)
   fmt.Printf("_id of upserted document: %v\n", result.UpsertedID)

The replaced document contains the contents of the replacement document
and the immutable ``_id`` field as follows:

.. code-block:: json
   :copyable: false

   {
      "_id" : 2056,
      "item" : "Cup",
      "quantity" : 107
   }

If multiple documents match the query filter passed to ``ReplaceOne()``,
the method selects and replaces the first matched document. If no
documents match the query filter in the update operation,
``ReplaceOne()`` makes no changes to the document. See our **<TODO:
link>** upsert guide to learn how to insert a new document if no
documents match the query filter.
