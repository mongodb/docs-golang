.. _golang-bulk:

===============
Bulk Operations
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use {+driver-short+} to
perform **bulk operations**. Bulk operations reduce the number
of calls to the server by performing multiple write operations
in a single method.

The ``Collection`` and ``Client`` classes both provide a ``BulkWrite()``
method. When calling ``BulkWrite()`` on a ``Collection`` instance, you can
perform multiple write operations on a single collection. When calling
``BulkWrite()`` on a ``Client`` instance, you can perform bulk writes across
multiple namespaces. In MongoDB, a namespace consists of the database name and the collection
name in the format ``<database>.<collection>``. 

.. important::

   To perform bulk operations on a ``Client`` instance,
   ensure that your application meets the following
   requirements:

   - Uses {+driver-short+} v2.1 or later 
   - Connects to {+mdb-server+} v8.0 or later

Sample Data
~~~~~~~~~~~

The examples in this guide use the following structs:

- ``Book`` struct, which models documents in the ``db.books`` collection.
  Each document contains a description of a book that includes the title,
  author, and page length.

- ``Poem`` struct, which models documents in the ``db.poems`` collection.
  Each document contains a description of a poem that includes the title,
  author, and publication year.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :start-after: start-structs
   :end-before: end-structs
   :language: go
   :dedent:

To run the examples in this guide, load the sample data into the
``books`` and ``poems`` collection by using the following snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/automatic-db-coll-creation.rst

Bulk Write
----------

To perform a bulk operation, pass an array of :ref:`WriteModel
<golang-write-model>` documents to the ``BulkWrite()`` method.

Modify Behavior
~~~~~~~~~~~~~~~

To modify the behavior of your collection-level or client-level
bulk operation, use the following types:

- Pass a ``BulkWriteOptions`` type to the ``Collection.BulkWrite()`` method 
- Pass a ``ClientBulkWriteOptions`` type to the ``Client.BulkWrite()`` method

The ``BulkWriteOptions`` type allows you to configure options by using the
following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetBypassDocumentValidation()`` 
     - | Specifies whether the operation can opt-out of document level validation.
       | Default: ``false``

   * - ``SetOrdered()``
     - | Specifies whether the driver stops performing write operations after an error occurs. 
       | Default: ``true``

The ``ClientBulkWriteOptions`` type allows you to configure options by using the
following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetBypassDocumentValidation()`` 
     - | Specifies whether the operation can opt-out of document level validation.
       | Default: ``false``

   * - ``SetOrdered()``
     - | Specifies whether the driver stops performing write operations after an error occurs. 
       | Default: ``true``

   * - ``SetComment()``
     - | Specifies a comment to attach to the operation.
       | Default: ``nil``

   * - ``SetLet()``
     - | Specifies parameters for update and delete operations, which improves command
         readability by separating the variables from the query text.
       | Default: none

   * - ``SetWriteConcern()``
     - | Specifies the write concern for the operations. 
       | Default: ``nil``

   * - ``SetVerboseResults()``
     - | Specifies whether detailed information about each successful operation is
         included in the result.
       | Default: ``false``

Return Values
~~~~~~~~~~~~~

The ``BulkWrite()`` method can return the following types,
which include information about the bulk operation:

- ``BulkWriteResult`` type, if you run the bulk write
  on a ``Collection``

- ``ClientBulkWriteResult`` type, if you run the bulk write
  on a ``Client``

The ``BulkWriteResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``InsertedCount``
     - The number of documents inserted.

   * - ``MatchedCount``
     - The number of documents matched by the :ref:`query filter <golang-query-filter-definition>` in update and replace operations.

   * - ``ModifiedCount``
     - The number of documents modified by update and replace operations.

   * - ``DeletedCount``
     - The number of documents deleted.
   
   * - ``UpsertedCount`` 
     - The number of documents :ref:`upserted <golang-upsert-definition>` by update and replace operations.

   * - ``UpsertedIDs`` 
     - A map of an operation index to the ``_id`` of each :ref:`upserted <golang-upsert-definition>` document.

The ``ClientBulkWriteResult`` type contains the following properties:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Property
     - Description

   * - ``InsertedCount``
     - The number of documents inserted.

   * - ``MatchedCount``
     - The number of documents matched by the :ref:`query filter <golang-query-filter-definition>` in update and replace operations.

   * - ``ModifiedCount``
     - The number of documents modified by update and replace operations.

   * - ``DeletedCount``
     - The number of documents deleted.
   
   * - ``UpsertedCount`` 
     - The number of documents :ref:`upserted <golang-upsert-definition>` by update and replace operations.

   * - ``InsertResults`` 
     - A map of an operation index to the ``_id`` value of each inserted document.

   * - ``UpdateResults`` 
     - A map of an operation index to the ``_id`` value of each updated document.

   * - ``DeleteResults`` 
     - A map of an operation index to the ``_id`` value of each deleted document.

   * - ``Acknowledged`` 
     - A boolean value that indicates whether the write operation was acknowledged.

   * - ``HasVerboseResults`` 
     - A boolean value that indicates whether the result contains detailed results.

.. _golang-write-model:

Operations
----------

To define the write operations to include in your bulk operation,
create a ``WriteModel`` or ``ClientWriteModel`` for each insert,
replace, update, or delete.

Insert
~~~~~~

To perform an insert operation, create an ``InsertOneModel`` specifying
the document you want to insert. To insert multiple documents, create an
``InsertOneModel`` for each document you want to insert.

The ``InsertOneModel`` allows you to specify its behavior with the
following method:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetDocument()`` 
     - | The document to insert.

Example
```````

This following example creates two ``InsertOneModel`` instances to
insert two documents:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :language: go
   :dedent:
   :start-after: begin bulk insert model
   :end-before: end bulk insert model

Replace
~~~~~~~

To perform a replace operation, create a ``ReplaceOneModel`` specifying
the document you want to replace and a :ref:`replacement document
<golang-replacement-document>`. To replace multiple documents, create a
``ReplaceOneModel`` for each document you want to replace.

The ``ReplaceOneModel`` allows you to specify its behavior with the
following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetCollation()`` 
     - | The type of language collation to use when sorting results.

   * - ``SetFilter()`` 
     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to replace.

   * - ``SetHint()`` 
     - | The index to use to scan for documents.

   * - ``SetReplacement()`` 
     - | The document to replace the matched document with.

   * - ``SetUpsert()`` 
     - | Whether to insert a new document if the :ref:`query filter <golang-query-filter-definition>` doesn't match any documents.

Example
```````

The following example creates a ``ReplaceOneModel`` to replace a
document where the ``title`` is "Lucy" with a new document:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :language: go
   :dedent:
   :start-after: begin bulk replace model
   :end-before: end bulk replace model

Update
~~~~~~

To perform an update operation, create an ``UpdateOneModel`` specifying
the document you want to update and an :ref:`update document
<golang-update-document>`. To update multiple documents, use the
``UpdateManyModel``.

The ``UpdateOneModel`` and ``UpdateManyModel`` allow you to specify
their behavior with the following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetArrayFilters()`` 
     - | The array elements the update applies to.

   * - ``SetCollation()`` 
     - | The type of language collation to use when sorting results.

   * - ``SetFilter()`` 
     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to update.

   * - ``SetHint()`` 
     - | The index to use to scan for documents.

   * - ``SetUpdate()`` 
     - | The modifications to apply on the matched documents.

   * - ``SetUpsert()`` 
     - | Whether to insert a new document if the :ref:`query filter <golang-query-filter-definition>` doesn't match any documents.

Example
```````

The following example creates an ``UpdateOneModel`` to decrement a
document's ``length`` by ``15`` if the ``author`` is "Elena Ferrante":

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :language: go
   :dedent:
   :start-after: begin bulk update model
   :end-before: end bulk update model

Delete
~~~~~~

To perform a delete operation, create a ``DeleteOneModel`` specifying
the document you want to delete. To delete multiple documents, use the
``DeleteManyModel``. 

The ``DeleteOneModel`` and ``DeleteManyModel`` allow you to specify
their behavior with the following methods:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Method
     - Description

   * - ``SetCollation()`` 
     - | The type of language collation to use when sorting results.

   * - ``SetFilter()`` 
     - | The :ref:`query filter <golang-query-filter-definition>` specifying which document to delete.

   * - ``SetHint()`` 
     - | The index to use to scan for documents.

Example
```````

The following example creates a ``DeleteManyModel`` to delete
documents where the ``length`` is greater than ``300``:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/bulkOps.go
   :language: go
   :dedent:
   :start-after: begin bulk delete model
   :end-before: end bulk delete model

Execution Order
---------------

The ``BulkWrite()`` method allows you to specify if you want to
execute the bulk operations as ordered or unordered in its
``BulkWriteOptions``. 

Ordered
~~~~~~~

By default, the ``BulkWrite()`` method executes bulk operations in
order you added them and stops if an error occurs.

.. tip::

   This is equivalent to specifying ``true`` in the ``SetOrdered()``
   method: 

   .. code-block:: go

      opts := options.BulkWrite().SetOrdered(true)

Unordered
~~~~~~~~~

To execute bulk write operations in any order and continue if an error
occurs, specify ``false`` to the ``SetOrdered()`` method. The method
reports the errors afterward.

Example
```````

The following example performs the following actions in any order: 

- Inserts two documents.
- Replaces a document where the ``title`` is "My Brilliant Friend" with a new document.
- Increments every document's ``length`` by ``10`` if the current
  ``length`` value is less than ``200``.
- Deletes all documents where the ``author`` field value includes "Jam".

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      models := []mongo.WriteModel{
        mongo.NewInsertOneModel().SetDocument(Book{Title: "Middlemarch", Author: "George Eliot", Length: 904}),
        mongo.NewInsertOneModel().SetDocument(Book{Title: "Pale Fire", Author: "Vladimir Nabokov", Length: 246}),
        mongo.NewReplaceOneModel().SetFilter(bson.D{{"title", "My Brilliant Friend"}}).
      	  SetReplacement(Book{Title: "Atonement", Author: "Ian McEwan", Length: 351}),
        mongo.NewUpdateManyModel().SetFilter(bson.D{{"length", bson.D{{"$lt", 200}}}}).
      	  SetUpdate(bson.D{{"$inc", bson.D{{"length", 10}}}}),
        mongo.NewDeleteManyModel().SetFilter(bson.D{{"author", bson.D{{"$regex", "Jam"}}}}),
      }
      opts := options.BulkWrite().SetOrdered(false)
      
      results, err := coll.BulkWrite(context.TODO(), models, opts)
      if err != nil {
         panic(err)
      }
      
      fmt.Printf("Number of documents inserted: %d\n", results.InsertedCount)
      fmt.Printf("Number of documents replaced or updated: %d\n", results.ModifiedCount)
      fmt.Printf("Number of documents deleted: %d\n", results.DeletedCount)

   .. output::
      :language: none
      :visible: false

      Number of documents inserted: 2
      Number of documents replaced or updated: 2
      Number of documents deleted: 1

The following documents are present in the ``books`` collection after
the bulk operation:

.. code-block:: none
   :copyable: false

   {"title":"Atonement","author":"Ian McEwan","length":351}
   {"title":"Middlemarch","author":"George Eliot","length":904}
   {"title":"Pale Fire","author":"Vladimir Nabokov","length":246}

Additional Information
----------------------

For a runnable example on performing a bulk operation, see
:ref:`golang-bulk-ops-usage-example`.

Related Operations
~~~~~~~~~~~~~~~~~~

To learn more about performing the operations mentioned, see the
following guides:

- :ref:`golang-query-document`
- :ref:`golang-insert-guide`
- :ref:`golang-change-document`
- :ref:`golang-delete-guide`
- :manual:`Bulk Write Operations </core/bulk-write-operations/>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `BulkWrite() <{+api+}/mongo#Collection.BulkWrite>`__
- `BulkWriteOptions <{+api+}/mongo/options#BulkWriteOptions>`__
- `BulkWriteResult <{+api+}/mongo#BulkWriteResult>`__
- `NewInsertOneModel() <{+api+}/mongo#NewUpdateOneModel>`__
- `NewReplaceOneModel() <{+api+}/mongo#NewReplaceOneModel>`__
- `NewReplaceOneModel() <{+api+}/mongo#NewReplaceOneModel>`__
- `NewUpdateOneModel() <{+api+}/mongo#NewUpdateOneModel>`__
- `NewUpdateManyModel() <{+api+}/mongo#NewReplaceOneModel>`__
- `NewDeleteOneModel() <{+api+}/mongo#NewReplaceOneModel>`__
- `NewDeleteManyModel() <{+api+}/mongo#NewReplaceOneModel>`__
