.. _golang-upsert-guide:

======================================
Insert or Update in a Single Operation
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _golang-upsert:

Overview
--------

In this guide, you can learn how to specify an :ref:`upsert
<golang-upsert-definition>`.

Sample Data
~~~~~~~~~~~

To run the example in this guide, load the sample data into the
``tea.ratings`` collection with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/upsert.go
   :language: go
   :dedent:
   :start-after: begin insert docs
   :end-before: end insert docs

.. include:: /includes/fundamentals/automatic-db-coll-creation.rst

Each document contains a rating for a type of tea that corresponds to
the ``type`` and ``rating`` fields.

Upsert
------

Applications use insert and update operations to store and modify data.
Sometimes, you need to choose between an insert and an update operation
depending on whether the document exists. MongoDB simplifies this
decision for us with an **upsert** option.

.. _golang-upsert-definition:

An upsert performs one of the following actions:

- Update documents that match your query filter
- Insert a document if there are no matches to your query filter

You can specify an upsert by passing ``true`` to the ``SetUpsert()``
method in the options of the following write operation methods:

- ``UpdateOne()``
- ``UpdateByID()``
- ``UpdateMany()``
- ``ReplaceOne()``
- ``FindOneAndUpdate()``
- ``FindOneAndReplace()``

.. tip::

   If you don't specify an upsert, no change occurs in the write
   operation when zero documents match your query filter. This is
   equivalent to passing ``false`` to the ``SetUpsert()`` method.

Example
~~~~~~~

The following example performs the following actions:

- Matches documents where the ``type`` is "Oolong"
- Updates the ``rating`` of the matched document to ``8``
- Inserts this document if there are no matches to your query filter

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{{"type", "Oolong"}}
      update := bson.D{{"$set", bson.D{{"rating", 8}}}}
      opts := options.Update().SetUpsert(true)

      result, err := coll.UpdateOne(context.TODO(), filter, update, opts)
      if err != nil {
         panic(err)
      }

      fmt.Printf("Number of documents updated: %v\n", result.ModifiedCount)
      fmt.Printf("Number of documents upserted: %v\n", result.UpsertedCount)

   .. output::
      :language: none
      :visible: false

      Number of documents updated: 0
      Number of documents upserted: 1

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-change-document`
- :ref:`golang-compound-operations`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types mentioned in this
guide, see the following API Documentation:

- `UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__
- `UpdateByID() <{+api+}/mongo#Collection.UpdateByID>`__
- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__
- `ReplaceOne() <{+api+}/mongo#Collection.ReplaceOne>`__
- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__
- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__
- `UpdateOptions.SetUpsert() <{+api+}/mongo/options#UpdateOptions.SetUpsert>`__
- `ReplaceOptions.SetUpsert() <{+api+}/mongo/options#ReplaceOptions.SetUpsert>`__
- `UpdateResult <{+api+}/mongo#UpdateResult>`__
