===================
Search Geospatially
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn about different **geospatial data** formats and how to
search geospatial data with the MongoDB Go Driver.

Geospatial data is data that represents a geographical location on
the surface of the Earth. Examples of geospatial data include:

- Locations of movie theaters
- Borders of countries
- Routes of bicycle rides
- Dog exercise areas in New York City

Coordinates on Earth
--------------------

To store and query your geospatial data in MongoDB, use **GeoJSON**. GeoJSON is
a data format created by the Internet Engineering Task Force (IETF). 

Here is the location of MongoDB headquarters in GeoJSON:

.. code-block:: json

   "MongoDB Headquarters" : {
      "type": "point",
      "coordinates": [-73.986805, 40.7620853]
   }

For definitive information on GeoJSON, see the
`official IETF specification <https://datatracker.ietf.org/doc/html/rfc7946>`__.

.. external resource

GeoJSON Positions
~~~~~~~~~~~~~~~~~

A position represents a single place on Earth and exists in code as an array
containing the following values: 

- Longitude in the first position (required)
- Latitude in the second position (required)
- Elevation in the third position (optional)

.. important:: Longitude then Latitude

  GeoJSON orders coordinates as longitude first and latitude second. This may
  be surprising as geographic coordinate system conventions generally list
  latitude first and longitude second. Make sure to check what format any other
  tools you are working with use. Popular tools such as OpenStreetMap and Google
  Maps list coordinates as latitude first and longitude second.

GeoJSON Types
~~~~~~~~~~~~~

Your GeoJSON object's type determines its geometric shape. Geometric shapes are
made up of positions.

Here are some common GeoJSON types and how you can specify them with positions:

- ``Point``: a single position. This could represent the location of a
  `sculpture <https://en.wikipedia.org/wiki/Chicago_Picasso>`__. 
- ``LineString``: an array of two or more positions that forms a series of line
  segments. This could represent
  `the route of the Great Wall of China <https://commons.wikimedia.org/wiki/File:GreatWallChina4.png>`__. 
- ``Polygon``: an array of positions in which the first and last
  position are the same and enclose some space. This could represent 
  `the land within Vatican City <https://commons.wikimedia.org/wiki/File:Vatican_City_map_EN.png>`__.

To learn more about the shapes you can use in MongoDB, see the
:manual:`GeoJSON manual entry </reference/geojson/>`.

.. external resource

Index
~~~~~

To query data stored in the GeoJSON format, add the field containing
GeoJSON data to a ``2dsphere`` index. The following snippet creates a
``2dsphere`` index on the ``location.geo`` field:

.. code-block:: go
      
      indexModel := mongo.IndexModel{
      Keys:    bson.D{{"location.geo", "2dsphere"}},
      }

      name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)
      if err != nil {
         panic(err)
      }

For more information on using indexes, visit the :ref:`</fundamentals/indexes>` guide.

Coordinates on a 2D Plane
-------------------------

You can store geospatial data using ``x`` and ``y`` coordinates on 
a two-dimensional Euclidean plane. We refer to coordinates on a two-dimensional
plane as "legacy coordinate pairs."

Legacy coordinate pairs have the following structure:

.. code-block:: json

   "<field name>" : [ x, y ]

Your field should contain an array of two values in which the first represents 
the ``x`` axis value and the second represents the ``y`` axis value.

Index
~~~~~

To query data stored as legacy coordinate pairs, you must add the field containing
legacy coordinate pairs to  a ``2d`` index. The following snippet creates a
``2d`` index on the ``coordinates`` field:

.. code-block:: java

   indexModel := mongo.IndexModel{
      Keys:    bson.D{{"location.geo.coordinates", "2d"}},
   }

   name, err := coll.Indexes().CreateOne(context.TODO(), indexModel)
   if err != nil {
      panic(err)
   }

For more information on legacy coordinate pairs, see the
:manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`.

.. tip:: Supported Operators

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, see the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

   .. external resource

Geospatial Queries
------------------

To perform a geospatial query, create a query filter with a field name and a geospatial
query operator. You can specify additional options for certain geospatial query operators
to limit the documents returned.

Query Operators
~~~~~~~~~~~~~~~

To query your geospatial data, use one of the following query operators: 

- ``$near``
- ``$geoWithin``
- ``$nearSphere``
- ``$geoIntersects`` *requires a 2dsphere index*

When using the ``$geoWithin`` operator, you can specify the following shape operators:

- ``$box``
- ``$polygon``
- ``$center``
- ``$centerSphere``

When using the ``$near`` operator, you can specify the following distance operators:

- ``$minDistance``
- ``$maxDistance``

For more information on geospatial query operators, see the
:manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

.. external resource

Examples
--------

Query by Proximity
~~~~~~~~~~~~~~~~~~

Code example:

location := bson.D{{"type", "Point"}, {"coordinates", []float32{-76.512016, 38.29697}}}

	filter := bson.D{
		{"location.geo",
			bson.D{
				{"$near", bson.D{
					{"$geometry", location},
				}},
			}},
	}
	var places []bson.D
	output, err := coll.Find(context.TODO(), filter)
	if err = output.All(context.TODO(), &places); err != nil {
		panic(err)
	}
	fmt.Println(places)

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

Code example:

