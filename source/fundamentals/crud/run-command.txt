.. _golang-run-command:

=============
Run a Command
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to run a raw **database command** with the
{+driver-short+}. You can use database commands to perform a variety of
administrative and diagnostic tasks, such as fetching server statistics,
initializing a replica set, or running an aggregation pipeline.

Compose a Command
-----------------

The {+driver-short+} provides two methods to run a database command. The
``RunCommand()`` method executes the given command against the database
and returns a ``SingleResult`` type. The ``RunCommandCursor()`` method
executes the given command against the database and parses the response
as a cursor.

.. note:: Read Preference

   These methods do not obey the read preference set for the database.
   You can set a read preference for a database command by passing a
   options to either method:
   
   .. code-block:: go

      opts := options.RunCmd().SetReadPreference(readpref.Primary())
      err := db.RunCommand(context.TODO(), command, opts).Decode(&result)
   
   For more information on
   read preference options, see the :ref:`golang-write-read-pref`
   fundamentals page.

Each method takes a Context and command document. The
command document must be an order-preserving type such as ``bson.D``.
The following code shows how you can run the ``listCollections`` command
on a database with the ``RunCommandCursor()`` method:

.. code-block:: go

   command := bson.D{{"listCollections", 1}}   
   cursor, err := db.RunCommandCursor(context.TODO(), command)

For a full list of database commands, see the :ref:`Additional Information <addl-info-runcommand>`.

Response
--------

Each method returns a document or a cursor containing documents with the
following fields:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Field
     - Description

   * - <command result>
     - Provides fields specific to the database command.

   * - ``ok``
     - Indicates whether the command has succeeded (``1``)
       or failed (``0``).

   * - ``operationTime``
     - Indicates the logical time of the operation. MongoDB uses the
       logical time to order operations.

   * - ``$clusterTime``
     - Provides a document that returns the signed cluster time. Cluster time is a
       logical time used for ordering of operations.

       The document contains the following fields:

       - ``clusterTime``, which is the timestamp of the highest known cluster time for the member
       - ``signature``, which is a document that contains the hash of the cluster time and the ID
         of the key used to sign the cluster time

Example
-------

The following code shows how you can run the ``count`` command on the
``flowers`` collection of the ``plants`` database with the ``RunCommand()`` method. This example
only searches for collections with a ``price`` property less than or
equal to 9.99.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/runCommand.go
   :language: go
   :dedent:
   :start-after: start-runcommand
   :end-before: end-runcommand

Output
~~~~~~

In the output, you should see the number of documents in
the collection that match the query as well as the command
execution information:

.. code-block:: json
   :emphasize-lines: 15

   {
       "$clusterTime": {
           "clusterTime": {
               "T": 1666967516,
               "I": 32
           },
           "signature": {
               "hash": {
                   "Subtype": 0,
                   "Data": "..."
               },
               "keyId": 7120249010111119362
           }
       },
       "n": 47,
       "ok": 1,
       "operationTime": {
           "T": 1666967516,
           "I": 32
       }
   }

.. _addl-info-runcommand:

Additional Information
----------------------

For more information about the concepts in this guide, see the following documentation:

- :manual:`db.runCommand() </reference/method/db.runCommand/>`
- :manual:`Database Commands </reference/command/>`
- :manual:`listCollections Command </reference/command/listCollections/>`

To learn how to retrieve data from a cursor, see the
:ref:`golang-cursor` fundamentals page.

API Documentation
~~~~~~~~~~~~~~~~~

- `RunCommand() <{+api+}/mongo#Database.RunCommand>`__
- `RunCommandCursor() <{+api+}/mongo#Database.RunCommandCursor>`__
- `RunCmdOptions <{+api+}/mongo/options#RunCmdOptions>`__
- `Cursor <{+api+}/mongo#Cursor>`__