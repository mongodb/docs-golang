.. _golang-logging:

=======
Logging
=======

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Starting in version 1.12, the {+driver-short+} provides a logging
interface to record driver events. In this guide, you can learn how to
use the driver to configure logging for your application.

Enable Logging
--------------

To configure a logger on your ``Client`` instance, call the
``SetLoggerOptions()`` method when specifying your ``ClientOptions``
object and pass these options to the ``Connect()`` method. The
``SetLoggerOptions()`` method takes a ``LoggerOptions`` type 
as a parameter, which contains the specifications that the driver uses
to configure the logger for your application.

The following code shows how to configure logging in a ``ClientOptions``
object and create a client with logging enabled:

.. code-block:: go
   :emphasize-lines: 4
   
   clientOptions := options.
   	Client().
   	ApplyURI(uri).
   	SetLoggerOptions(loggerOptions)

   client, err := mongo.Connect(context.TODO(), clientOptions)

Configure a Logger
------------------

To create a ``LoggerOptions`` object, call the ``options.Logger()``
method. The following table describes how to set properties on
``LoggerOptions`` to configure your logger. The first column contains
the ``LoggerOptions`` properties, the second column describes the
properties, and the third column describes the
setter methods:

.. list-table::
   :widths: 31 38 31
   :header-rows: 1

   * - Property
     - Description
     - Setter Method

   * - | ``ComponentLevels``
       | **Type**: ``map[LogComponent]LogLevel``
     - | A mapping of components, specified by ``LogComponent``, to log
         severity levels, specified by ``LogLevel``. The driver uses the
         ``LogLevel`` for each ``LogComponent`` to determine if the log
         message should be generated. To learn more about
         ``LogComponent`` and ``LogLevel``, see :ref:`Logging Components
         and Severity Levels <golang-logging-component-severity>`.
     - | ``SetComponentLevel()``
       | **Parameters**: ``LogComponent``, ``LogLevel``

   * - | ``Sink``
       | **Type**: ``LogSink``
     - | The logging interface that the driver uses to log messages.
         The ``LogSink`` type is an interface that you can implement to
         provide a :ref:`custom sink <golang-logging-custom>` or integrate a :ref:`third-party
         logger <golang-logging-thirdparty>` for the driver's logs. If you don't set this
         property, driver uses the standard logging library.
     - | ``SetSink()``
       | **Parameter**: ``LogSink``

   * - | ``MaxDocumentLength``
       | **Type**: ``uint``
       | **Default**: ``1000``
     - | The maximum length in bytes of a document that the driver logs. If the
         underlying document is larger than this value, the driver
         truncates it and appends ellipses to the partial log message.
     - | ``SetMaxDocumentLength()``
       | **Parameter**: ``uint``

.. tip:: Write Logs to a Specific File
   
   By default, the standard logger emits messages to your console (``stderr``). You can
   specify a logging destination by setting the ``MONGODB_LOG_PATH``
   environment variable to a filepath or ``stdout``.

.. _golang-logging-component-severity:

Logging Components and Severity Levels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify which components the driver will log against by
specifying the ``LogComponent`` type. The driver provides the following
built-in specifications for ``LogComponent``:

- ``LogComponentAll``: enables logging for all components.
- ``LogComponentCommand``: enables command monitor logging.
- ``LogComponentTopology``: enables topology logging.
- ``LogComponentServerSelection``: enables server selection logging.
- ``LogComponentConnection``: enables connection services logging.

You can also specify the logging component by using the enumeration of
the preceding specifications. The following code shows equivalent ways
of enabling command monitoring:

.. code-block:: go

   // Using named value
   comp := options.LogComponentCommand

   // Using enumeration
   comp := options.LogComponent(1)

You can specify the log severity level by specifying the ``LogLevel``
type. The driver provides the following
built-in specifications for ``LogLevel``:

- ``LevelOff``: suppresses logging.
- ``LevelInfo``: enables logging of high-level informational messages.
- ``LevelDebug``: enables logging of detailed debug messages.

You can also specify the severity level by using the enumeration of
the preceding specifications. The following code shows equivalent ways
of enabling logging at the ``INFO`` level:

.. code-block:: go

   // Using named value
   lvl := options.LogLevelInfo

   // Using enumeration
   lvl := options.LogLevel(1)

.. important::

   The {+driver-short+} currently supports only ``DEBUG`` level messages.

To learn more about logging severity levels, see the Wikipedia entry on
the :wikipedia:`Syslog standard for message logging <Syslog#Severity_level>`.

Example
~~~~~~~

This example shows how to configure a basic logger that uses the standard
logging library and prints log messages. The logger has the following
specifications:

- The maximum document length is ``25``.
- The logging component is ``LogComponentCommand``.
- The logging severity level is ``LogLevelDebug``.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :emphasize-lines: 1-4, 9
   :start-after: start-standard-logger
   :end-before: end-standard-logger

The following code inserts a document, which causes the driver
to emit log messages on that operation:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/logging.go
      :language: go
      :dedent:
      :start-after: start-insert
      :end-before: end-insert

   .. output::
      :language: console
      :visible: false

      {"command":"{\"insert\": \"testColl\",\"or...","commandName":"insert","databaseName":"testDB","driverConnectionId":1,"message":"Command started","operationId":0,"requestId":13,"serverConnectionId":97377,"serverHost":"...","serverPort":27017,"timestamp":...}
      {"commandName":"insert","driverConnectionId":1,"durationMS":19,"message":"Command succeeded","operationId":0,"reply":"{\"n\": {\"$numberInt\":\"1\"},...","requestId":13,"serverConnectionId":97377,"serverHost":"...","serverPort":27017,"timestamp":...}

.. _golang-logging-custom:

Use a Custom Logger
-------------------

If the standard logging library does not meet your needs, you can
implement a custom logger. By customizing your logging configuration,
you have more control over the content, format, and frequency of log messages.

To use a custom logger, define a logger struct and implement the
``Info()`` and ``Error()`` methods for the struct. Next, set the logger as
the ``LogSink`` for your ``Client`` by calling the ``SetSink()`` method on
your ``LoggerOptions`` instance.

Example
~~~~~~~

This example demonstrates how to define and implement a custom logger.

1. Define the ``CustomLogger`` struct.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :start-after: start-customlogger-struct
   :end-before: end-customlogger-struct

2. Implement the ``Info()`` and ``Error()`` methods with custom log message formatting.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :start-after: start-customlogger-funcs
   :end-before: end-customlogger-funcs

3. Assign a ``Writer`` to your logger and set it as the ``Sink`` for
   your ``Client``. In this example, the logger logs against commands
   and connection events at the ``DEBUG`` level.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :emphasize-lines: 1-2, 4-8, 13
   :start-after: start-set-customlogger
   :end-before: end-set-customlogger

The following code inserts a document, which causes the driver
to emit log messages on that operation:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/logging.go
      :language: go
      :dedent:
      :start-after: start-insert
      :end-before: end-insert

   .. output::
      :language: console
      :visible: false

      level: 1 DEBUG, message: Connection pool created
      level: 1 DEBUG, message: Connection pool ready
      level: 1 DEBUG, message: Connection pool created
      level: 1 DEBUG, message: Connection pool ready
      level: 1 DEBUG, message: Connection pool created
      level: 1 DEBUG, message: Connection pool ready
      level: 1 DEBUG, message: Connection checkout started
      level: 1 DEBUG, message: Connection created
      level: 1 DEBUG, message: Connection ready
      level: 1 DEBUG, message: Connection checked out
      level: 1 DEBUG, message: Command started
      level: 1 DEBUG, message: Command succeeded
      level: 1 DEBUG, message: Connection checked in

.. _golang-logging-thirdparty:

Integrate Third-Party Loggers
-----------------------------

There are many third-party logging packages available in Go. To use
a third-party logger in your application, create a logger and assign it
as the sink in your ``LoggerOptions`` instance.

.. tip:: Logging Packages

   Some of the loggers you can integrate with the {+driver-short+}
   include :github:`logrus <sirupsen/logrus>`, :github:`zap
   <uber-go/zap>`, and :github:`zerolog <rs/zerolog>`. For full examples
   using each of these loggers, see the :github:`driver source code <mongodb/mongo-go-driver/tree/master/examples/_logger>`.

Example
~~~~~~~

This example demonstrates how to define and integrate a ``logrus``
logger into your application.

1. Install the necessary packages.

Copy the following ``go get`` commands into your terminal to download
the ``logrus`` packages needed for this example:

.. code-block:: bash

   go get github.com/bombsimon/logrusr/v4
   go get github.com/sirupsen/logrus
   go get github.com/t-tomalak/logrus-easy-formatter

2. Define the ``logrus`` logger.

The code creates a ``logrus`` logger with the following
specifications:

- The logger writes log messages to the console.
- The logger logs messages at ``DEBUG`` level.
- The logger formats messages as ``[<level>]: <timestamp> - message <<command type>>``.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :start-after: start-make-logrus
   :end-before: end-make-logrus

3. Set the logger as the ``Sink`` for
   your ``Client``. In this example, the logger logs against commands at
   the ``DEBUG`` level.

.. literalinclude:: /includes/fundamentals/code-snippets/logging.go
   :language: go
   :dedent:
   :emphasize-lines: 1, 3-6, 11
   :start-after: start-set-thirdparty-logger
   :end-before: end-set-thirdparty-logger

The following code performs some CRUD operations, which causes the driver
to emit log messages:

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/logging.go
      :language: go
      :dedent:
      :start-after: start-log-operations
      :end-before: end-log-operations

   .. output::
      :language: console
      :visible: false

      [DEBUG]: 2023-06-28 11:13:41 - Command started <insert>
      [DEBUG]: 2023-06-28 11:13:41 - Command succeeded <insert>
      [DEBUG]: 2023-06-28 11:13:41 - Command started <delete>
      [DEBUG]: 2023-06-28 11:13:41 - Command succeeded <delete>
      [DEBUG]: 2023-06-28 11:13:41 - Command started <update>
      [DEBUG]: 2023-06-28 11:13:41 - Command succeeded <update>

Additional Information
----------------------

For more information about setting client options, see the
:ref:`golang-connection-guide`.

In addition to logging, you can enable server selection and
topology monitoring. To learn more, see :ref:`golang-monitoring`.

.. _golang-logging-api:

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the types or methods discussed in this
guide, see the following API Documentation:

- `SetLoggerOptions() <{+api+}/mongo/options#ClientOptions.SetLoggerOptions>`__
- `LoggerOptions <{+api+}/mongo/options#LoggerOptions>`__
- `LogSink <{+api+}/mongo/options#LogSink>`__
- `SetComponentLevel() <{+api+}/mongo/options#LoggerOptions.SetComponentLevel>`__
- `SetMaxDocumentLength() <{+api+}/mongo/options#LoggerOptions.SetMaxDocumentLength>`__
- `SetSink() <{+api+}/mongo/options#LoggerOptions.SetSink>`__
- `LogComponent <{+api+}/mongo/options#LogComponent>`__
- `LogLevel <{+api+}/mongo/options#LogLevel>`__
