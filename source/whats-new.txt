.. _golang-whats-new:

==========
What's New
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: update, backward compatibility

.. tip:: Release Notes

   To learn more about changes and updates between versions, you can
   read the `release notes
   <https://github.com/mongodb/mongo-go-driver/tags>`__ published with the driver source code.

Learn what's new in:

* :ref:`Version 2.0 <version-2.0>`
* :ref:`Version 1.16 <version-1.16>`
* :ref:`Version 1.15.1 <version-1.15.1>`
* :ref:`Version 1.15 <version-1.15>`
* :ref:`Version 1.14 <version-1.14>`
* :ref:`Version 1.13 <version-1.13>`
* :ref:`Version 1.12.1 <version-1.12.1>`
* :ref:`Version 1.12 <version-1.12>`
* :ref:`Version 1.11 <version-1.11>`
* :ref:`Version 1.10 <version-1.10>`
* :ref:`Version 1.9 <version-1.9>`
* :ref:`Version 1.8 <version-1.8>`
* :ref:`Version 1.7 <version-1.7>`
* :ref:`Version 1.6 <version-1.6>`
* :ref:`Version 1.5 <version-1.5>`
* :ref:`Version 1.4 <version-1.4>`
* :ref:`Version 1.3 <version-1.3>`
* :ref:`Version 1.2 <version-1.2>`
* :ref:`Version 1.1 <version-1.1>`
* :ref:`Version 1.0 <version-1.0>`

.. _version-2.0:

What's New in 2.0
-----------------

.. important:: Breaking Changes

   The {+driver-short+} v2.0 release introduces the following breaking
   changes:

   - ``mongo.Connect()`` does not accept a Context parameter. This
     method accepts only an options object. To view an example that uses
     this method, see the :ref:`Connection Example Code
     <go-connection-example-code>` in the Connection Guide.

   - The ``Cursor.SetMaxTime()`` method is renamed to
     ``Cursor.SetMaxAwaitTime()``. This method specifies the maximum time
     that the server waits for new documents retrieved from a capped
     collection with a tailable cursor.
   
   - Removal of operation-specific timeout options. The following fields
     and setter methods have been removed from the driver:

     - ``AggregateOptions.MaxTime``, ``AggregateOptions.SetMaxTime()``
     - ``ClientOptions.SocketTimeout``, ``ClientOptions.SetSocketTimeout()``
     - ``CountOptions.MaxTime``, ``CountOptions.SetMaxTime()``
     - ``DistinctOptions.MaxTime``, ``DistinctOptions.SetMaxTime()``
     - ``EstimatedDocumentCountOptions.MaxTime``, ``EstimatedDocumentCountOptions.SetMaxTime()``
     - ``FindOptions.MaxTime``, ``FindOptions.SetMaxTime()``
     - ``FindOneOptions.MaxTime``, ``FindOneOptions.SetMaxTime()``
     - ``FindOneAndReplaceOptions.MaxTime``, ``FindOneAndReplaceOptions.SetMaxTime()``
     - ``FindOneAndUpdateOptions.MaxTime``, ``FindOneAndUpdateOptions.SetMaxTime()``
     - ``GridFSFindOptions.MaxTime``, ``GridFSFindOptions.SetMaxTime()``
     - ``CreateIndexesOptions.MaxTime``, ``CreateIndexesOptions.SetMaxTime()``
     - ``DropIndexesOptions.MaxTime``, ``DropIndexesOptions.SetMaxTime()``
     - ``ListIndexesOptions.MaxTime``, ``ListIndexesOptions.SetMaxTime()``
     - ``SessionOptions.DefaultMaxCommitTime``, ``SessionOptions.SetDefaultMaxCommitTime()``
     - ``TransactionOptions.MaxCommitTime``, ``TransactionOptions.SetMaxCommitTime()``
     - ``WriteConcern.WTimeout``

     Instead, you can set a timeout on your client or within a Context.
     Learn more in the :ref:`golang-timeout-setting` section of the
     Connection Options guide.

The 2.0 {+driver-short+} release includes the following improvements and fixes:

- You can access the GridFS API from the ``mongo`` package. In previous
  versions, you could access GridFS functions from the separate ``gridfs``
  package, but this functionality is now merged with the main driver
  ``mongo`` package. To learn more, see the :ref:`golang-gridfs` guide.

- The ``Comment`` field in any options struct takes a value of type ``any`` instead of type
  ``string``. To set this field, you can use the ``SetComment()`` method and pass a parameter
  of type ``any``.

- Updates to monitoring event documents:

  - The ``CommandStartedEvent`` and ``CommandFinishedEvent`` structs
    have a single ``ServerConnectionID`` field of type ``int64`` to
    capture the connection ID.
    
  - The ``ConnectionID`` field of the ``PoolEvent``
    struct takes a value of type ``int64`` instead of ``uint64``.

  To view sample event documents, see the :ref:`golang-monitoring` guides.

- The ``Session`` interface is converted to a struct. See the
  :ref:`golang-transactions` guide to learn more.

- The ``Distinct()`` method returns a struct that can be decoded into a
  specified type. See the :ref:`golang-retrieve-distinct` guide to learn more.

- The ``IndexView.DropOne()`` method returns only an error, if present. In
  previous versions, this method also returned the server response, which
  contained the number of dropped indexes. See the
  :ref:`golang-remove-index` section of the Indexes guide to learn more.

- Updates to the builder pattern for types in the ``options`` package.
  The pattern maintains a slice of setter functions, so you cannot set
  data directly to an options object. This update does not
  generally change how you create and use options. To learn more, see
  the `feature JIRA ticket <https://jira.mongodb.org/browse/GODRIVER-2696>`__.

- The driver no longer supports the ``mongo.ErrUnacknowledgedWrite`` sentinel
  error if a write operation is not acknowledged. To confirm that the server
  acknowledged a write operation, you must access the ``Acknowledged``
  property from the result struct returned by the write method.

  The following example shows how to confirm acknowledgment of an insert
  operation:

  .. code-block:: go
     :emphasize-lines: 6

     res, err := coll.InsertOne(context.TODO(), bson.D{{"x", 2}})
     if err != nil {
     	panic(err)
     }
     
     fmt.Print(res.Acknowledged)

- You can set options for transactions run in a given session by
  creating a ``TransactionOptions`` instance and passing the instance to
  the ``SetDefaultTransactionOptions()`` method of the
  ``SessionOptions`` type. To learn more, see the
  :ref:`golang-session-txn-options` section of the Transactions guide.

- The ``Collection.Clone()`` method does not return an error.

.. _version-1.16:

What's New in 1.16
------------------

The 1.16 {+driver-short+} release includes the following improvements and fixes:

- Adds support for specifying an index type when creating an Atlas Search index.

- Reduces memory usage when the ``zstd`` compression algorithm is enabled.

- Upgrades some dependency requirements. For a list of upgrades, see the "Upgrade Dependencies"
  section of the :github:`v1.16 release notes </mongodb/mongo-go-driver/releases/tag/v1.16.0>`.

For more information about these changes, see the :github:`v1.16 release notes
</mongodb/mongo-go-driver/releases/tag/v1.16.0>` on Github.

.. _version-1.15.1:

What's New in 1.15.1
--------------------

The 1.15.1 {+driver-short+} patch release includes the following improvements
and fixes:

- Fixes a possible connection leak where disconnecting from a replica set cluster
  left behind ``rttMonitor`` connections.

- Adds support for manually specifying a ``maxTimeMS`` value for read and aggregation
  operations when a client-wide timeout and an operation timeout are set.

- Adds a ``RemainingBatchLength()`` method that you can call on a change stream.

For more information about these changes, see the :github:`v1.15.1 release notes
</mongodb/mongo-go-driver/releases/tag/v1.15.1>` on Github.

.. _version-1.15:

What's New in 1.15
------------------

The 1.15 {+driver-short+} release includes the following improvements and fixes:

- Connection churn can be mitigated by setting a client-wide timeout by
  specifying the ``timeoutMS`` connection option or by calling the
  `SetTimeout() <https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo/options#ClientOptions.SetTimeout>`__
  function. When the timeout is set, the driver attempts to reuse a connection
  after an operation times out and waits for up to one second to check if
  the connection can be reused before closing it.

- Connection pool events include a ``Duration`` field to measure the checkout
  duration and total amount of time it took to establish a connection.

.. _version-1.14:

What's New in 1.14
------------------

The 1.14 {+driver-short+} release includes the following improvements and fixes:

- Go versions before 1.18 are no longer supported.

- In case of a heartbeat timeout, in-progress operations are preemptively canceled.

- Connection strings that include the ``"mongodb+srv://"`` prefix can contain capital
  letters in the SRV hostname.

.. _version-1.13:

What's New in 1.13
------------------

The 1.13 {+driver-short+} release includes the following improvements and fixes:

- Logging for server selection and SDAM. To learn more about logging, see the
  :ref:`golang-logging` documentation.

- Methods on the ``Collection`` type that allow you to manage search indexes programmatically.

- The ``event.CommandStartedEvent`` and ``event.CommandFinishedEvent`` events return
  the ``DatabaseName`` field. This field is also included in the command-logging analogs.

- In a sharded topology, when selecting a server to retry an unsuccessful query, the driver
  excludes the server used for the initial attempt. Instead, if there's more than
  one eligible ``mongos`` instance, the driver randomly selects one. Unhealthy instances
  are automatically excluded from selection.

- Streaming SDAM is disabled by default on AWS Lambda and similar function-as-a-service
  (FaaS) platforms. You can enable monitoring by using the
  ``serverMonitoringMode`` URI option.

.. _version-1.12.1:

What's New in 1.12.1
--------------------

The 1.12 {+driver-short+} release includes the following improvements and fixes:

- The driver unpins connections when ending a session. This prevents connections
  from leaking when a user runs a transaction while connected to a load balancer.

- The driver does not throw a runtime error when you unmarshal an empty
  ``bson.RawValue`` type with an invalid type or marshal a ``nil`` pointer of a ``ReadConcern`` instance.

- Setting ``options.LogComponentAll`` as the log component correctly results in the publication of logs against all components.

.. _version-1.12:

What's New in 1.12
------------------

.. important:: Deprecation Notice

   - The ``mongo.NewClient()`` and ``client.Connect()`` methods are
     deprecated. You can create a client and connect in one call
     by using the ``mongo.Connect()`` method.

New features of the 1.12 Go driver release include:

Queryable Encryption
~~~~~~~~~~~~~~~~~~~~

This driver version adds support for :ref:`qe-manual-feature-qe` (QE). To learn
more about the requirements for using the QE feature, see the
:ref:`Queryable Encryption Driver Compatibility Table
<qe-compatibility-reference>`.

The ``ClientEncryption.CreateEncryptedCollection()``
method automatically creates data encryption keys when
you create a new encrypted collection. To learn how to use the QE
feature, see the :ref:`qe-quick-start` in the Server manual.

Logging Interface
~~~~~~~~~~~~~~~~~

You can now record connection management and command execution events by
using the ``LogSink`` logging interface.

To learn more, see the :ref:`golang-logging` Fundamentals guide.

Additional BSON Marshalling Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version adds features to the ``options`` package to specify
how the driver marshals and unmarshals BSON.

The following example shows how to set BSON options on your
``Client``. The options specify the following behaviors:

- The driver falls back to ``json`` :ref:`struct tags
  <golang-struct-tags>` if ``bson`` struct tags are absent.
- The driver marshals ``nil`` Go map types as empty BSON documents.
- The driver marshals ``nil`` Go slice types as empty BSON arrays.

.. code-block:: go

   bsonOpts := &options.BSONOptions{
   	UseJSONStructTags: true,
   	NilMapAsEmpty:     true,
   	NilSliceAsEmpty:   true,
   }
   options.Client().SetBSONOptions(bsonOpts)

For a full example of how to specify and implement the ``BSONOptions``
type, see the `API documentation <{+api+}/mongo#example-Connect-BSONOptions>`__.

Simplified Write Concern Specification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version simplifies the ``WriteConcern`` API. To learn more about
the changes, see :ref:`Write Concern <golang-writeconcern>`.

Additional Changes
~~~~~~~~~~~~~~~~~~

- Support for authentication with AWS IAM roles in EKS.
- Addition of the ``Cursor.SetBatchSize()`` method to allow
  specification of the size of batches fetched when iterating through a
  cursor.
- Addition of the ``UnmarshalValue()`` method to allow ummarshalling of
  BSON values marshalled with the ``MarshalValue()`` method.

.. _version-1.11.0:
.. _version-1.11:

What's New in 1.11
------------------

.. important:: Upgrade to Version 1.11.9 or Later

   Versions 1.11.0 through 1.11.2 of the driver have been retracted because
   of a bug that could cause undefined behavior when reading the ``Raw`` field
   on database error types, such as ``CommandError`` and
   ``WriteException``.

   Version 1.11.8 of the driver has been retracted because
   it incorrectly contains changes intended for 1.12.1.

   Upgrade to version 1.11.9 or later if you are using a retracted
   version of the driver.

New features of the 1.11 Go driver release include:

- Removal of support for MongoDB versions 3.5 and older.

- Removal of support for Go versions 1.12 and older.

- Improvements to ``Timeout`` API and behavior, including:

  - Modified retry logic for greater application resiliency.

  - Extended ``mongo.IsTimeout`` error helper to catch more timeout errors.

  - New GridFS methods that take contexts instead of using ``SetReadDeadline``
    and ``SetWriteDeadline``.

- Reduced memory allocations during operation execution.

- Fix for SRV polling bug that prevented changes in SRV records when the
  associated MongoDB connection string included a username and password.

- Support for :abbr:`GCP (Google Cloud Platform)` service accounts when using
  Google Cloud Key Management Services.

- Improvements to server-side resource cleanup when using the ``Cursor.All`` and
  ``Session.WithTransaction`` functions.

- ``SERVICE_HOST`` Kerberos authentication parameter specification enabled with
  the ``authMechanismProperties`` connection string option.

- Corrected output from the ``bson.Raw.String()`` method to Extended JSON
  type for timestamps when the BSON document contains a UTC Timestamp
  field.

- Resolution of conflicts when retrying reads with read concern
  ``"available"`` or ``"linearizable"``.


.. _version-1.10.0:
.. _version-1.10:

What's New in 1.10
------------------

.. important:: Upgrade to Version 1.10.1 or Higher

  The 1.10.1 Go driver patches a bug that can cause data corruption when
  rotating :ref:`Data Encryption Keys <csfle-key-architecture>` encrypted
  with a :ref:`Customer Master Key <csfle-key-architecture>` hosted on Google
  Cloud Key Management Service or Azure Key Vault.

New features of the 1.10 Go driver release include:

- Full compatibility with MongoDB 6.0.

- Support for new features related to :ref:`qe-manual-feature-qe`,
  including new options for automatic and manual encryption.

- Support for the new Automatic Encryption Shared Library, which replaces the
  ``mongocryptd`` process. The shared library requires MongoDB v6.0 Enterprise
  or later and ``libmongocrypt`` 1.5.0 or later.

- :ref:`clustered index <golang-clustered-indexes>` creation support.

- A new API and ``ClientEncryption`` entity operations for encryption key
  management.

- A ``Timeout`` client option to set default context timeouts for
  each operation sent through that client.

- A patch to default data to either ``primitive.M`` or ``primitive.D`` when
  decoding empty types.

- Support for encoding atypical map key types for data that can be unmarshalled
  into a textual representation of itself.

- Performance optimizations, including:

  - Improved full document requests for before and after updates in change
    stream events.

  - Improved :abbr:`PRN (pseudo-random number)` and :abbr:`UUID (universally
    unique identifier)` generation.

  - Reduced memory consumption when compressing wire messages.

- Troubleshooting support for `frequently encountered issues.
  <https://github.com/mongodb/mongo-go-driver/blob/master/docs/common-issues.md>`__


.. _version-1.9:

What's New in 1.9
-----------------

New features of the 1.9 Go driver release include:

- Improved connection storm mitigation.

- ``Custom`` options to change-stream and aggregate operations.

- ``Let`` option on most CRUD commands that specifies parameters for use
  in an aggregate expression. ``Let`` must be a document that maps
  parameter names to values that are constant or closed expressions without
  references to document fields. MongoDB v5.0 or later is required.

- New constructor functions that create ``Cursor`` and ``SingleResult``
  instances from marshallable and non-nil BSON documents.


.. _version-1.8:

What's New in 1.8
-----------------

New features of the 1.8 Go driver release include:

- Full compatibility with MongoDB 5.1.

- Support for :abbr:`KMIP (Key Management Interoperability Protocol)` as a KMS
  provider for :abbr:`{+csfle-short+} ({+csfle-long+})`.

- Redesigned driver connection pool for low operation ``Context`` timeouts and
  to reduce connection churn. Behavior changes include:

  - New connection creation times out at ``connectTimeoutMS``.

  - At most, two new connections can be established at the same time.

- Removal of oppressive and unnecessarily gendered language in the Go driver
  documentation, code, tests, and spec tests.


.. _version-1.7:

What's New in 1.7
-----------------

.. important:: Upgrade to Version 1.7.2 or Higher

  The 1.7.2 Go driver contains a bug fix for a data race that can occur between
  creating and checking out connections when ``minPoolSize > 0``.

New features of the 1.7 Go driver release include:

- Full compatibility with MongoDB 5.0.

- Support for the :readconcern:`"snapshot"` read concern outside of
  multi-document transactions for certain read operations.

- Improved ``WriteException`` and ``BulkWriteException`` error messages for
  schema validation reported by the ``WriteError.Details`` field.


.. _version-1.6:

What's New in 1.6
-----------------

.. important:: Upgrade to Version 1.6.2 or Higher

  The 1.6.2 Go driver contains a bug fix for a data race that can occur between
  creating and checking out connections when ``minPoolSize > 0``.

New features of the 1.6 Go driver release include:

- Support for the MongoDB Stable API. For more information, see the
  :ref:`Stable API Guide <golang-stable-api>`.

- Support for connections to any MongoDB service that runs behind a load
  balancer.

- Support for creating time series collections. For more information, see
  the :ref:`Time Series Collections Guide <golang-time-series>`.

- ``Let`` option for aggregate expressions.


.. _version-1.5:

What's New in 1.5
-----------------

New features of the 1.5 Go driver release include:

- Support for Azure and :abbr:`GCP (Google Cloud Platform)` key-management
  services with {+csfle-long+}.

- New errors API to detect duplicate-key errors, timeouts, and network
  errors.

- Server monitoring to monitor changes on a MongoDB deployment.

- Errors to prevent unexpected behavior on maps that contain multiple
  keys being used as a hint option, as a sort option, or for index creation.


.. _version-1.4:

What's New in 1.4
-----------------

New features of the 1.4 Go driver release include:

- Full compatibility with MongoDB 4.4.

- Support for stapled and non-stapled OCSP verification.

- New ``tlsDisableOCSPEndpointCheck=true`` URI option to disable sending HTTP
  requests if the OCSP responder is not reachable from the driver and there is
  no stapled response.

- Additional context to errors encountered during BSON unmarshalling.

- Proper ``Unwrap`` functions for various driver error types.


.. _version-1.3:

What's New in 1.3
-----------------

New features of the 1.3 Go driver release include:

- ``mgocompat`` package that exports a BSON registry compatible with
  ``globalsign/mgo/bson``, which can be used by calling the
  ``ClientOptions.SetRegistry`` method.

- ``RegisterTypeEncoder`` and ``RegisterHookEncoder`` methods, which
  replace the deprecated ``RegisterEncoder`` method. A corresponding change has
  been made to replace ``RegisterDecoder``.


.. _version-1.2:

What's New in 1.2
-----------------

New features of the 1.2 Go driver release include:

- Support for {+csfle-short+}.

- ``bson.MarshalValue`` function, which marshals Go types to BSON.

- ``StringCodec``, which allows non-string fields to be decoded into a
  String field in a struct.

- ``IntCodec``, ``UIntCodec``, ``BoolCodec``, and ``FloatCodec`` added to
  ``mgocompat`` to allow codecs to convert between numbers and booleans.


.. _version-1.1:

What's New in 1.1
-----------------

New features of the 1.1 Go driver release include:

- Full compatibility with MongoDB 4.2.

- Redesigned lower-level driver implementation to improve maintainability and
  performance.

- Connection Monitoring and Pooling specifications to monitor various connection
  and connection pool events with improved efficiency.


.. _version-1.0:

What's New in 1.0
-----------------

This release adds no new features.
